//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logic.Operations{
	
	using System;
	using Photon.LoadBalancing.MasterServer;
	using Photon.LoadBalancing.Operations;
	using Photon.SocketServer;
	using ExitGames.Logging;


	/// <summary>
	/// Logic operation handler for game specific operations.
	/// </summary>
	public class LogicOperationHandler{
		
		static readonly ILogger log = LogManager.GetCurrentClassLogger();

		public OperationResponse HandleOperationRequest(OperationRequest operationRequest, SendParameters parameters, MasterClientPeer peer){

			BaseLogicOperation checkOp = new BaseLogicOperation(peer.Protocol, operationRequest);

			switch ((int)checkOp.LogicCode){
				default:
					return new OperationResponse{
						OperationCode = (byte)0,
						ReturnCode = 1,
						DebugMessage = "Invalid LogicOperation"};
			
				case (LogicOperationCode.GetSectorInfo):
					return HandleGetSectorInfo(operationRequest, peer);
			}
			
		}
		
		private OperationResponse InvalidOperation(){
			
			OperationResponse response = new OperationResponse{
				OperationCode = (byte)0,
				ReturnCode = 1,
				DebugMessage = "Invalid operation parameters!"};
			return response;
		}
		
		OperationResponse HandleGetSectorInfo(OperationRequest opRequest, MasterClientPeer peer){
			
			OperationResponse response;
			// Create the specific operation object for this method
			 GetSectorInfoOperation operation = new GetSectorInfoOperation(peer.Protocol, opRequest);
			
			// This statement required in every operation handler method
			if (operation.IsValid == false){
				return InvalidOperation();
			}
			
			if (operation.LogicCode == LogicOperationCode.GetSectorInfo){
				// Run specific operation logic here, build a response, and return it
				// logic logic logic
				operation.SectorInfoDict = "Fake sector info";
				log.Debug("Received sector info request");
				response = new OperationResponse((byte)77, operation);
				return response;
			} else {
				// received something unexpected
				response = new OperationResponse{
					OperationCode = (byte)0,
					ReturnCode = 1,
					DebugMessage = "Unexpected message"};
				return response;
			}
		}
	}
}

