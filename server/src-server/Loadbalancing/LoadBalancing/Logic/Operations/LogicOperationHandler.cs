//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logic.Operations{
	
	using System;
	using Photon.LoadBalancing.MasterServer;
	using Photon.LoadBalancing.Operations;
	using Photon.SocketServer;
	using ExitGames.Logging;
	using System.Diagnostics;


	/// <summary>
	/// Logic operation handler for game specific operations.
	/// </summary>
	public class LogicOperationHandler{
		
		static readonly ILogger log = LogManager.GetCurrentClassLogger();

		public OperationResponse HandleOperationRequest(OperationRequest operationRequest, SendParameters parameters, MasterClientPeer peer){

			switch ((LogicOperationCode)operationRequest.OperationCode){
				default:
					return new OperationResponse(operationRequest.OperationCode){
					ReturnCode = (short)ErrorCode.OperationInvalid,
					DebugMessage = "Unknown operation code"};
			
				case (LogicOperationCode.GetSectorInfo):
					return HandleGetSectorInfo(operationRequest, peer);
				
				case (LogicOperationCode.SpawnMasterClientProcess):
					return HandleSpawnMasterClientProcess(operationRequest, peer);
			}
		}
		
		private OperationResponse InvalidOperation(LogicOperationCode code){
			
			OperationResponse response = new OperationResponse{
				OperationCode = (byte)code,
				ReturnCode = 1,
				DebugMessage = "Invalid operation parameters!"};
			return response;
		}
		
		OperationResponse HandleGetSectorInfo(OperationRequest opRequest, MasterClientPeer peer){
			
			OperationResponse response;
			// Create the specific operation object for this method
			GetSectorInfoOperation operation = new GetSectorInfoOperation(peer.Protocol, opRequest);
			
			// This statement required in every operation handler method
			if (operation.IsValid == false){
				return InvalidOperation(LogicOperationCode.GetSectorInfo);
			}
			
			// Run specific operation logic here, build a response, and return it
			// logic logic logic
			operation.SectorInfoDict = "Fake sector info";
			log.Debug("Received sector info request");
			response = new OperationResponse((byte)LogicOperationCode.GetSectorInfo, operation);
			return response;
		}
		
		OperationResponse HandleSpawnMasterClientProcess(OperationRequest opRequest, MasterClientPeer peer){
			
			OperationResponse response;
			// Create the specific operation object for this method
			SpawnMasterClientProccessOperation operation = new SpawnMasterClientProccessOperation(peer.Protocol, opRequest);
			
			// This statement required in every operation handler method
			if (operation.IsValid == false){
				return InvalidOperation(LogicOperationCode.SpawnMasterClientProcess);
			}
			
			//TODO: Get count of rooms that are running + 1
			//int newRoomNumber = 0;
			//operation.RoomID = operation.RoomID + newRoomNumber.ToString();
			operation.RoomID = "room0";
			log.Debug("Spawning new MasterClient process.");
			
			//TODO: This should be done in a new thread so it doesn't hold up the server.
			Process process = new Process();
			process.StartInfo.FileName = "C:\\Build\\testbuild.exe";
			process.Start();

			response = new OperationResponse((byte)LogicOperationCode.SpawnMasterClientProcess, operation);
			return response;
		}
	}
}

